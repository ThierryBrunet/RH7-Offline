Log file created at: 2022/02/19 06:51:07
Running on machine: rh8
Binary: Built with gc go1.17.5 for linux/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0219 06:51:07.531635   18712 out.go:297] Setting OutFile to fd 1 ...
I0219 06:51:07.531755   18712 out.go:349] isatty.IsTerminal(1) = true
I0219 06:51:07.531757   18712 out.go:310] Setting ErrFile to fd 2...
I0219 06:51:07.531761   18712 out.go:349] isatty.IsTerminal(2) = true
I0219 06:51:07.531827   18712 root.go:315] Updating PATH: /home/thierry/.minikube/bin
W0219 06:51:07.531893   18712 root.go:293] Error reading config file at /home/thierry/.minikube/config/config.json: open /home/thierry/.minikube/config/config.json: no such file or directory
I0219 06:51:07.533057   18712 out.go:304] Setting JSON to false
I0219 06:51:07.546132   18712 start.go:112] hostinfo: {"hostname":"rh8","uptime":1681,"bootTime":1645215787,"procs":246,"os":"linux","platform":"redhat","platformFamily":"rhel","platformVersion":"8.5","kernelVersion":"4.18.0-348.12.2.el8_5.x86_64","kernelArch":"x86_64","virtualizationSystem":"","virtualizationRole":"","hostId":"9634485e-8de9-4611-86de-08d787431ccf"}
I0219 06:51:07.546227   18712 start.go:122] virtualization:  
I0219 06:51:07.568510   18712 out.go:176] ðŸ˜„  minikube v1.25.1 on Redhat 8.5
W0219 06:51:07.568785   18712 preload.go:294] Failed to list preload files: open /home/thierry/.minikube/cache/preloaded-tarball: no such file or directory
I0219 06:51:07.568828   18712 notify.go:174] Checking for updates...
I0219 06:51:07.568939   18712 driver.go:344] Setting default libvirt URI to qemu:///system
I0219 06:51:07.568962   18712 global.go:111] Querying for installed drivers using PATH=/home/thierry/.minikube/bin:/home/thierry/.local/bin:/home/thierry/bin:/root/.vscode-server/bin/f80445acd5a3dadef24aa209168452a3d97cc326/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/.dotnet/tools:/root/bin:/home/thierry/.dotnet/tools
I0219 06:51:07.569014   18712 global.go:119] kvm2 default: true priority: 8, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "virsh": executable file not found in $PATH Reason: Fix:Install libvirt Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/kvm2/}
I0219 06:51:07.602518   18712 global.go:119] none default: false priority: 4, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc:}
I0219 06:51:07.602641   18712 global.go:119] podman default: true priority: 7, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "podman": executable file not found in $PATH Reason: Fix:Install Podman Doc:https://minikube.sigs.k8s.io/docs/drivers/podman/}
I0219 06:51:07.602651   18712 global.go:119] ssh default: false priority: 4, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc:}
I0219 06:51:07.602686   18712 global.go:119] virtualbox default: true priority: 6, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:unable to find VBoxManage in $PATH Reason: Fix:Install VirtualBox Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/virtualbox/}
I0219 06:51:07.602721   18712 global.go:119] vmware default: true priority: 7, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "docker-machine-driver-vmware": executable file not found in $PATH Reason: Fix:Install docker-machine-driver-vmware Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/vmware/}
I0219 06:51:07.644164   18712 docker.go:132] docker version: linux-20.10.12
I0219 06:51:07.644325   18712 cli_runner.go:133] Run: docker system info --format "{{json .}}"
I0219 06:51:07.729238   18712 info.go:263] docker info: {ID:RQCM:MKZN:53R6:YDF3:UGCH:FRPK:SXWS:U2Z5:MGMC:DIXT:XS6Q:FQBC Containers:3 ContainersRunning:3 ContainersPaused:0 ContainersStopped:0 Images:29 Driver:overlay2 DriverStatus:[[Backing Filesystem xfs] [Supports d_type true] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:true KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:45 OomKillDisable:true NGoroutines:50 SystemTime:2022-02-19 06:51:07.668757145 +1000 AEST LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:4.18.0-348.12.2.el8_5.x86_64 OperatingSystem:Red Hat Enterprise Linux 8.5 (Ootpa) OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:4 MemTotal:6349656064 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:rh8 Labels:[] ExperimentalBuild:false ServerVersion:20.10.12 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:7b11cfaabd73bb80907dd23182b9347b4245eb5d Expected:7b11cfaabd73bb80907dd23182b9347b4245eb5d} RuncCommit:{ID:v1.0.2-0-g52b36a2 Expected:v1.0.2-0-g52b36a2} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=default] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Experimental:true Name:app Path:/usr/libexec/docker/cli-plugins/docker-app SchemaVersion:0.1.0 ShortDescription:Docker App Vendor:Docker Inc. Version:v0.9.1-beta3] map[Name:buildx Path:/usr/libexec/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.7.1-docker] map[Name:scan Path:/usr/libexec/docker/cli-plugins/docker-scan SchemaVersion:0.1.0 ShortDescription:Docker Scan Vendor:Docker Inc. Version:v0.12.0]] Warnings:<nil>}}
I0219 06:51:07.729452   18712 docker.go:237] overlay module found
I0219 06:51:07.729460   18712 global.go:119] docker default: true priority: 9, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc:}
I0219 06:51:07.729470   18712 driver.go:279] not recommending "none" due to default: false
I0219 06:51:07.729473   18712 driver.go:279] not recommending "ssh" due to default: false
I0219 06:51:07.729480   18712 driver.go:314] Picked: docker
I0219 06:51:07.729483   18712 driver.go:315] Alternatives: [none ssh]
I0219 06:51:07.729485   18712 driver.go:316] Rejects: [podman virtualbox vmware kvm2]
I0219 06:51:07.735066   18712 out.go:176] âœ¨  Automatically selected the docker driver. Other choices: none, ssh
I0219 06:51:07.735130   18712 start.go:280] selected driver: docker
I0219 06:51:07.735136   18712 start.go:795] validating driver "docker" against <nil>
I0219 06:51:07.735150   18712 start.go:806] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc:}
I0219 06:51:07.735158   18712 start.go:1498] auto setting extra-config to "kubelet.housekeeping-interval=5m".
I0219 06:51:07.735259   18712 cli_runner.go:133] Run: docker system info --format "{{json .}}"
I0219 06:51:07.824776   18712 info.go:263] docker info: {ID:RQCM:MKZN:53R6:YDF3:UGCH:FRPK:SXWS:U2Z5:MGMC:DIXT:XS6Q:FQBC Containers:3 ContainersRunning:3 ContainersPaused:0 ContainersStopped:0 Images:29 Driver:overlay2 DriverStatus:[[Backing Filesystem xfs] [Supports d_type true] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:true KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:45 OomKillDisable:true NGoroutines:50 SystemTime:2022-02-19 06:51:07.764875379 +1000 AEST LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:4.18.0-348.12.2.el8_5.x86_64 OperatingSystem:Red Hat Enterprise Linux 8.5 (Ootpa) OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:4 MemTotal:6349656064 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:rh8 Labels:[] ExperimentalBuild:false ServerVersion:20.10.12 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:7b11cfaabd73bb80907dd23182b9347b4245eb5d Expected:7b11cfaabd73bb80907dd23182b9347b4245eb5d} RuncCommit:{ID:v1.0.2-0-g52b36a2 Expected:v1.0.2-0-g52b36a2} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=seccomp,profile=default] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Experimental:true Name:app Path:/usr/libexec/docker/cli-plugins/docker-app SchemaVersion:0.1.0 ShortDescription:Docker App Vendor:Docker Inc. Version:v0.9.1-beta3] map[Name:buildx Path:/usr/libexec/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.7.1-docker] map[Name:scan Path:/usr/libexec/docker/cli-plugins/docker-scan SchemaVersion:0.1.0 ShortDescription:Docker Scan Vendor:Docker Inc. Version:v0.12.0]] Warnings:<nil>}}
I0219 06:51:07.824851   18712 start_flags.go:286] no existing cluster config was found, will generate one from the flags 
I0219 06:51:07.837084   18712 start_flags.go:367] Using suggested 2200MB memory alloc based on sys=6055MB, container=6055MB
I0219 06:51:07.837150   18712 start_flags.go:796] Wait components to verify : map[apiserver:true system_pods:true]
I0219 06:51:07.837158   18712 cni.go:93] Creating CNI manager for ""
I0219 06:51:07.837161   18712 cni.go:167] CNI unnecessary in this configuration, recommending no CNI
I0219 06:51:07.837165   18712 start_flags.go:300] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.23.1 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[{Component:kubelet Key:housekeeping-interval Value:5m}] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/thierry:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror:}
I0219 06:51:07.842508   18712 out.go:176] ðŸ‘  Starting control plane node minikube in cluster minikube
I0219 06:51:07.842634   18712 cache.go:120] Beginning downloading kic base image for docker with docker
I0219 06:51:07.845652   18712 out.go:176] ðŸšœ  Pulling base image ...
I0219 06:51:07.845813   18712 preload.go:132] Checking if preload exists for k8s version v1.23.1 and runtime docker
I0219 06:51:07.845939   18712 image.go:75] Checking for gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b in local docker daemon
I0219 06:51:07.884927   18712 cache.go:148] Downloading gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b to local cache
I0219 06:51:07.885734   18712 image.go:59] Checking for gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b in local cache directory
I0219 06:51:07.885837   18712 image.go:119] Writing gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b to local cache
I0219 06:51:08.071067   18712 preload.go:119] Found remote preload: https://storage.googleapis.com/minikube-preloaded-volume-tarballs/preloaded-images-k8s-v16-v1.23.1-docker-overlay2-amd64.tar.lz4
I0219 06:51:08.071084   18712 cache.go:57] Caching tarball of preloaded images
I0219 06:51:08.071607   18712 preload.go:132] Checking if preload exists for k8s version v1.23.1 and runtime docker
I0219 06:51:08.076143   18712 out.go:176] ðŸ’¾  Downloading Kubernetes v1.23.1 preload ...
I0219 06:51:08.076248   18712 preload.go:238] getting checksum for preloaded-images-k8s-v16-v1.23.1-docker-overlay2-amd64.tar.lz4 ...
I0219 06:51:08.444351   18712 download.go:101] Downloading: https://storage.googleapis.com/minikube-preloaded-volume-tarballs/preloaded-images-k8s-v16-v1.23.1-docker-overlay2-amd64.tar.lz4?checksum=md5:77d59461764645b5765b0160074a5cfb -> /home/thierry/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v16-v1.23.1-docker-overlay2-amd64.tar.lz4
I0219 06:52:11.661122   18712 preload.go:248] saving checksum for preloaded-images-k8s-v16-v1.23.1-docker-overlay2-amd64.tar.lz4 ...
I0219 06:52:11.661207   18712 preload.go:255] verifying checksumm of /home/thierry/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v16-v1.23.1-docker-overlay2-amd64.tar.lz4 ...
I0219 06:52:12.614614   18712 cache.go:60] Finished verifying existence of preloaded tar for  v1.23.1 on docker
I0219 06:52:12.614892   18712 profile.go:147] Saving config to /home/thierry/.minikube/profiles/minikube/config.json ...
I0219 06:52:12.614911   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/profiles/minikube/config.json: {Name:mk7fca4aea6f104cf9ec9e6bbcc44f02b6c67d10 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:52:37.759021   18712 cache.go:151] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b as a tarball
I0219 06:52:37.759064   18712 cache.go:162] Loading gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b from local cache
I0219 06:52:56.480635   18712 cache.go:165] successfully loaded gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b from cached tarball
I0219 06:52:56.480692   18712 cache.go:208] Successfully downloaded all kic artifacts
I0219 06:52:56.480729   18712 start.go:313] acquiring machines lock for minikube: {Name:mk7747e470d995708f676ebe7bb00a50b85fda98 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0219 06:52:56.481184   18712 start.go:317] acquired machines lock for "minikube" in 438.913Âµs
I0219 06:52:56.481339   18712 start.go:89] Provisioning new machine with config: &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.23.1 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[{Component:kubelet Key:housekeeping-interval Value:5m}] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.23.1 ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/thierry:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror:} &{Name: IP: Port:8443 KubernetesVersion:v1.23.1 ControlPlane:true Worker:true}
I0219 06:52:56.481415   18712 start.go:126] createHost starting for "" (driver="docker")
I0219 06:52:56.485135   18712 out.go:203] ðŸ”¥  Creating docker container (CPUs=2, Memory=2200MB) ...
I0219 06:52:56.485483   18712 start.go:160] libmachine.API.Create for "minikube" (driver="docker")
I0219 06:52:56.485498   18712 client.go:168] LocalClient.Create starting
I0219 06:52:56.485647   18712 main.go:130] libmachine: Creating CA: /home/thierry/.minikube/certs/ca.pem
I0219 06:52:56.834189   18712 main.go:130] libmachine: Creating client certificate: /home/thierry/.minikube/certs/cert.pem
I0219 06:52:56.961457   18712 cli_runner.go:133] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0219 06:52:57.002144   18712 cli_runner.go:180] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0219 06:52:57.002586   18712 network_create.go:254] running [docker network inspect minikube] to gather additional debugging logs...
I0219 06:52:57.002604   18712 cli_runner.go:133] Run: docker network inspect minikube
W0219 06:52:57.042305   18712 cli_runner.go:180] docker network inspect minikube returned with exit code 1
I0219 06:52:57.042323   18712 network_create.go:257] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error: No such network: minikube
I0219 06:52:57.042330   18712 network_create.go:259] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error: No such network: minikube

** /stderr **
I0219 06:52:57.042392   18712 cli_runner.go:133] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0219 06:52:57.079094   18712 network.go:288] reserving subnet 192.168.49.0 for 1m0s: &{mu:{state:0 sema:0} read:{v:{m:map[] amended:true}} dirty:map[192.168.49.0:0xc000206248] misses:0}
I0219 06:52:57.079129   18712 network.go:235] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:}}
I0219 06:52:57.079139   18712 network_create.go:106] attempt to create docker network minikube 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I0219 06:52:57.079280   18712 cli_runner.go:133] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true minikube
I0219 06:52:57.387405   18712 network_create.go:90] docker network minikube 192.168.49.0/24 created
I0219 06:52:57.387421   18712 kic.go:106] calculated static IP "192.168.49.2" for the "minikube" container
I0219 06:52:57.387593   18712 cli_runner.go:133] Run: docker ps -a --format {{.Names}}
I0219 06:52:57.420274   18712 cli_runner.go:133] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I0219 06:52:57.454193   18712 oci.go:102] Successfully created a docker volume minikube
I0219 06:52:57.454247   18712 cli_runner.go:133] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b -d /var/lib
I0219 06:53:02.278356   18712 cli_runner.go:186] Completed: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b -d /var/lib: (4.824033645s)
I0219 06:53:02.278383   18712 oci.go:106] Successfully prepared a docker volume minikube
I0219 06:53:02.278422   18712 preload.go:132] Checking if preload exists for k8s version v1.23.1 and runtime docker
I0219 06:53:02.278437   18712 kic.go:179] Starting extracting preloaded images to volume ...
I0219 06:53:02.279043   18712 cli_runner.go:133] Run: docker run --rm --entrypoint /usr/bin/tar -v /home/thierry/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v16-v1.23.1-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b -I lz4 -xf /preloaded.tar -C /extractDir
I0219 06:53:07.754443   18712 cli_runner.go:186] Completed: docker run --rm --entrypoint /usr/bin/tar -v /home/thierry/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v16-v1.23.1-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b -I lz4 -xf /preloaded.tar -C /extractDir: (5.475378426s)
I0219 06:53:07.754456   18712 kic.go:188] duration metric: took 5.476017 seconds to extract preloaded images to volume
W0219 06:53:07.754686   18712 oci.go:135] Your kernel does not support swap limit capabilities or the cgroup is not mounted.
W0219 06:53:07.754694   18712 oci.go:119] Your kernel does not support memory limit capabilities or the cgroup is not mounted.
I0219 06:53:07.755112   18712 cli_runner.go:133] Run: docker info --format "'{{json .SecurityOptions}}'"
I0219 06:53:07.847034   18712 cli_runner.go:133] Run: docker run -d -t --privileged --device /dev/fuse --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b
I0219 06:53:08.653743   18712 cli_runner.go:133] Run: docker container inspect minikube --format={{.State.Running}}
I0219 06:53:08.692876   18712 cli_runner.go:133] Run: docker container inspect minikube --format={{.State.Status}}
I0219 06:53:08.754780   18712 cli_runner.go:133] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I0219 06:53:08.961287   18712 oci.go:281] the created container "minikube" has a running status.
I0219 06:53:08.961308   18712 kic.go:210] Creating ssh key for kic: /home/thierry/.minikube/machines/minikube/id_rsa...
I0219 06:53:09.238390   18712 kic_runner.go:191] docker (temp): /home/thierry/.minikube/machines/minikube/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0219 06:53:09.506565   18712 cli_runner.go:133] Run: docker container inspect minikube --format={{.State.Status}}
I0219 06:53:09.561339   18712 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0219 06:53:09.561347   18712 kic_runner.go:114] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I0219 06:53:09.653852   18712 cli_runner.go:133] Run: docker container inspect minikube --format={{.State.Status}}
I0219 06:53:09.694593   18712 machine.go:88] provisioning docker machine ...
I0219 06:53:09.694633   18712 ubuntu.go:169] provisioning hostname "minikube"
I0219 06:53:09.694741   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:09.723041   18712 main.go:130] libmachine: Using SSH client type: native
I0219 06:53:09.723192   18712 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0a80] 0x7a3b60 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0219 06:53:09.723199   18712 main.go:130] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0219 06:53:09.881249   18712 main.go:130] libmachine: SSH cmd err, output: <nil>: minikube

I0219 06:53:09.881311   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:09.919721   18712 main.go:130] libmachine: Using SSH client type: native
I0219 06:53:09.919850   18712 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0a80] 0x7a3b60 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0219 06:53:09.919860   18712 main.go:130] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0219 06:53:10.056965   18712 main.go:130] libmachine: SSH cmd err, output: <nil>: 
I0219 06:53:10.056978   18712 ubuntu.go:175] set auth options {CertDir:/home/thierry/.minikube CaCertPath:/home/thierry/.minikube/certs/ca.pem CaPrivateKeyPath:/home/thierry/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/thierry/.minikube/machines/server.pem ServerKeyPath:/home/thierry/.minikube/machines/server-key.pem ClientKeyPath:/home/thierry/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/thierry/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/thierry/.minikube}
I0219 06:53:10.056990   18712 ubuntu.go:177] setting up certificates
I0219 06:53:10.056996   18712 provision.go:83] configureAuth start
I0219 06:53:10.057051   18712 cli_runner.go:133] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0219 06:53:10.089275   18712 provision.go:138] copyHostCerts
I0219 06:53:10.089372   18712 exec_runner.go:151] cp: /home/thierry/.minikube/certs/ca.pem --> /home/thierry/.minikube/ca.pem (1078 bytes)
I0219 06:53:10.090377   18712 exec_runner.go:151] cp: /home/thierry/.minikube/certs/cert.pem --> /home/thierry/.minikube/cert.pem (1123 bytes)
I0219 06:53:10.090439   18712 exec_runner.go:151] cp: /home/thierry/.minikube/certs/key.pem --> /home/thierry/.minikube/key.pem (1675 bytes)
I0219 06:53:10.090485   18712 provision.go:112] generating server cert: /home/thierry/.minikube/machines/server.pem ca-key=/home/thierry/.minikube/certs/ca.pem private-key=/home/thierry/.minikube/certs/ca-key.pem org=thierry.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0219 06:53:10.205746   18712 provision.go:172] copyRemoteCerts
I0219 06:53:10.205880   18712 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0219 06:53:10.205915   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:10.233652   18712 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/thierry/.minikube/machines/minikube/id_rsa Username:docker}
I0219 06:53:10.332998   18712 ssh_runner.go:362] scp /home/thierry/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1078 bytes)
I0219 06:53:10.359086   18712 ssh_runner.go:362] scp /home/thierry/.minikube/machines/server.pem --> /etc/docker/server.pem (1204 bytes)
I0219 06:53:10.381972   18712 ssh_runner.go:362] scp /home/thierry/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0219 06:53:10.413057   18712 provision.go:86] duration metric: configureAuth took 356.050868ms
I0219 06:53:10.413071   18712 ubuntu.go:193] setting minikube options for container-runtime
I0219 06:53:10.413232   18712 config.go:176] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.23.1
I0219 06:53:10.413281   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:10.444281   18712 main.go:130] libmachine: Using SSH client type: native
I0219 06:53:10.444392   18712 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0a80] 0x7a3b60 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0219 06:53:10.444397   18712 main.go:130] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0219 06:53:10.584231   18712 main.go:130] libmachine: SSH cmd err, output: <nil>: overlay

I0219 06:53:10.584240   18712 ubuntu.go:71] root file system type: overlay
I0219 06:53:10.584340   18712 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0219 06:53:10.584388   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:10.620830   18712 main.go:130] libmachine: Using SSH client type: native
I0219 06:53:10.621001   18712 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0a80] 0x7a3b60 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0219 06:53:10.621095   18712 main.go:130] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %s "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0219 06:53:10.784991   18712 main.go:130] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0219 06:53:10.785067   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:10.840154   18712 main.go:130] libmachine: Using SSH client type: native
I0219 06:53:10.840307   18712 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0a80] 0x7a3b60 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0219 06:53:10.840320   18712 main.go:130] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0219 06:53:11.888276   18712 main.go:130] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2021-12-13 11:43:42.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2022-02-18 20:53:10.782199159 +0000
@@ -1,30 +1,32 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
+BindsTo=containerd.service
 After=network-online.target firewalld.service containerd.service
 Wants=network-online.target
-Requires=docker.socket containerd.service
+Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutSec=0
-RestartSec=2
-Restart=always
-
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
+Restart=on-failure
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
@@ -32,16 +34,16 @@
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0219 06:53:11.888293   18712 machine.go:91] provisioned docker machine in 2.193683758s
I0219 06:53:11.888300   18712 client.go:171] LocalClient.Create took 15.402799942s
I0219 06:53:11.888307   18712 start.go:168] duration metric: libmachine.API.Create for "minikube" took 15.402824044s
I0219 06:53:11.888311   18712 start.go:267] post-start starting for "minikube" (driver="docker")
I0219 06:53:11.888314   18712 start.go:277] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0219 06:53:11.888443   18712 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0219 06:53:11.888474   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:11.929638   18712 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/thierry/.minikube/machines/minikube/id_rsa Username:docker}
I0219 06:53:12.030076   18712 ssh_runner.go:195] Run: cat /etc/os-release
I0219 06:53:12.033720   18712 main.go:130] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0219 06:53:12.033732   18712 main.go:130] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0219 06:53:12.033738   18712 main.go:130] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0219 06:53:12.033742   18712 info.go:137] Remote host: Ubuntu 20.04.2 LTS
I0219 06:53:12.033748   18712 filesync.go:126] Scanning /home/thierry/.minikube/addons for local assets ...
I0219 06:53:12.033790   18712 filesync.go:126] Scanning /home/thierry/.minikube/files for local assets ...
I0219 06:53:12.033806   18712 start.go:270] post-start completed in 145.492141ms
I0219 06:53:12.034103   18712 cli_runner.go:133] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0219 06:53:12.067172   18712 profile.go:147] Saving config to /home/thierry/.minikube/profiles/minikube/config.json ...
I0219 06:53:12.067653   18712 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0219 06:53:12.067744   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:12.101569   18712 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/thierry/.minikube/machines/minikube/id_rsa Username:docker}
I0219 06:53:12.198914   18712 start.go:129] duration metric: createHost completed in 15.717481048s
I0219 06:53:12.198927   18712 start.go:80] releasing machines lock for "minikube", held for 15.717734256s
I0219 06:53:12.199037   18712 cli_runner.go:133] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0219 06:53:12.243867   18712 ssh_runner.go:195] Run: systemctl --version
I0219 06:53:12.243916   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:12.243937   18712 ssh_runner.go:195] Run: curl -sS -m 2 https://k8s.gcr.io/
I0219 06:53:12.243979   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:12.302763   18712 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/thierry/.minikube/machines/minikube/id_rsa Username:docker}
I0219 06:53:12.310997   18712 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/thierry/.minikube/machines/minikube/id_rsa Username:docker}
I0219 06:53:12.450091   18712 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service containerd
I0219 06:53:13.058244   18712 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0219 06:53:13.079368   18712 cruntime.go:272] skipping containerd shutdown because we are bound to it
I0219 06:53:13.079592   18712 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0219 06:53:13.122593   18712 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %s "runtime-endpoint: unix:///var/run/dockershim.sock
image-endpoint: unix:///var/run/dockershim.sock
" | sudo tee /etc/crictl.yaml"
I0219 06:53:13.181627   18712 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0219 06:53:13.444159   18712 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0219 06:53:13.713229   18712 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0219 06:53:13.735551   18712 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0219 06:53:14.052087   18712 ssh_runner.go:195] Run: sudo systemctl start docker
I0219 06:53:14.084261   18712 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0219 06:53:14.196646   18712 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0219 06:53:14.288734   18712 out.go:203] ðŸ³  Preparing Kubernetes v1.23.1 on Docker 20.10.12 ...
I0219 06:53:14.289130   18712 cli_runner.go:133] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0219 06:53:14.342481   18712 ssh_runner.go:195] Run: grep 192.168.49.1	host.minikube.internal$ /etc/hosts
I0219 06:53:14.347784   18712 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.49.1	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0219 06:53:14.370562   18712 out.go:176]     â–ª kubelet.housekeeping-interval=5m
I0219 06:53:14.371467   18712 preload.go:132] Checking if preload exists for k8s version v1.23.1 and runtime docker
I0219 06:53:14.371588   18712 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0219 06:53:14.442408   18712 docker.go:606] Got preloaded images: -- stdout --
k8s.gcr.io/kube-apiserver:v1.23.1
k8s.gcr.io/kube-proxy:v1.23.1
k8s.gcr.io/kube-controller-manager:v1.23.1
k8s.gcr.io/kube-scheduler:v1.23.1
k8s.gcr.io/etcd:3.5.1-0
k8s.gcr.io/coredns/coredns:v1.8.6
k8s.gcr.io/pause:3.6
kubernetesui/dashboard:v2.3.1
kubernetesui/metrics-scraper:v1.0.7
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0219 06:53:14.442425   18712 docker.go:537] Images already preloaded, skipping extraction
I0219 06:53:14.442519   18712 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0219 06:53:14.497715   18712 docker.go:606] Got preloaded images: -- stdout --
k8s.gcr.io/kube-apiserver:v1.23.1
k8s.gcr.io/kube-proxy:v1.23.1
k8s.gcr.io/kube-scheduler:v1.23.1
k8s.gcr.io/kube-controller-manager:v1.23.1
k8s.gcr.io/etcd:3.5.1-0
k8s.gcr.io/coredns/coredns:v1.8.6
k8s.gcr.io/pause:3.6
kubernetesui/dashboard:v2.3.1
kubernetesui/metrics-scraper:v1.0.7
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0219 06:53:14.497729   18712 cache_images.go:84] Images are preloaded, skipping loading
I0219 06:53:14.497837   18712 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0219 06:53:14.616354   18712 cni.go:93] Creating CNI manager for ""
I0219 06:53:14.616367   18712 cni.go:167] CNI unnecessary in this configuration, recommending no CNI
I0219 06:53:14.616377   18712 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I0219 06:53:14.616407   18712 kubeadm.go:153] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.23.1 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/dockershim.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NoTaintMaster:true NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[]}
I0219 06:53:14.616520   18712 kubeadm.go:157] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.23.1
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%"
  nodefs.inodesFree: "0%"
  imagefs.available: "0%"
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0219 06:53:14.616575   18712 kubeadm.go:791] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.23.1/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime=docker --hostname-override=minikube --housekeeping-interval=5m --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.23.1 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[{Component:kubelet Key:housekeeping-interval Value:5m}] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I0219 06:53:14.616636   18712 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.23.1
I0219 06:53:14.630871   18712 binaries.go:44] Found k8s binaries, skipping transfer
I0219 06:53:14.630947   18712 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0219 06:53:14.642920   18712 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (361 bytes)
I0219 06:53:14.666560   18712 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0219 06:53:14.685615   18712 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2051 bytes)
I0219 06:53:14.705530   18712 ssh_runner.go:195] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0219 06:53:14.710263   18712 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0219 06:53:14.725329   18712 certs.go:54] Setting up /home/thierry/.minikube/profiles/minikube for IP: 192.168.49.2
I0219 06:53:14.725358   18712 certs.go:187] generating minikubeCA CA: /home/thierry/.minikube/ca.key
I0219 06:53:15.428132   18712 crypto.go:156] Writing cert to /home/thierry/.minikube/ca.crt ...
I0219 06:53:15.428145   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/ca.crt: {Name:mk54555ee902ca5372cd1f6d1975fae19e868a75 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.428828   18712 crypto.go:164] Writing key to /home/thierry/.minikube/ca.key ...
I0219 06:53:15.428836   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/ca.key: {Name:mka7a27cff0595c80e3d13b99b73984c0f8e3fc8 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.429113   18712 certs.go:187] generating proxyClientCA CA: /home/thierry/.minikube/proxy-client-ca.key
I0219 06:53:15.509183   18712 crypto.go:156] Writing cert to /home/thierry/.minikube/proxy-client-ca.crt ...
I0219 06:53:15.509195   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/proxy-client-ca.crt: {Name:mkeb7f1ab562d03924c0a3203f61b0df589fde43 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.509509   18712 crypto.go:164] Writing key to /home/thierry/.minikube/proxy-client-ca.key ...
I0219 06:53:15.509516   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/proxy-client-ca.key: {Name:mk62f8047b05b824bfdfe4ec4e5df08718185551 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.509732   18712 certs.go:302] generating minikube-user signed cert: /home/thierry/.minikube/profiles/minikube/client.key
I0219 06:53:15.509756   18712 crypto.go:68] Generating cert /home/thierry/.minikube/profiles/minikube/client.crt with IP's: []
I0219 06:53:15.676961   18712 crypto.go:156] Writing cert to /home/thierry/.minikube/profiles/minikube/client.crt ...
I0219 06:53:15.676979   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/profiles/minikube/client.crt: {Name:mk5b3d16df132703b7cfd253a38f1c046e7663f2 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.677362   18712 crypto.go:164] Writing key to /home/thierry/.minikube/profiles/minikube/client.key ...
I0219 06:53:15.677371   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/profiles/minikube/client.key: {Name:mka6b8425ff66d7caae987bd45e6778150029ba7 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.677531   18712 certs.go:302] generating minikube signed cert: /home/thierry/.minikube/profiles/minikube/apiserver.key.dd3b5fb2
I0219 06:53:15.677546   18712 crypto.go:68] Generating cert /home/thierry/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 with IP's: [192.168.49.2 10.96.0.1 127.0.0.1 10.0.0.1]
I0219 06:53:15.791955   18712 crypto.go:156] Writing cert to /home/thierry/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 ...
I0219 06:53:15.791967   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2: {Name:mk18d035e318558c8adf63bd8f48355fb486c8c4 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.792259   18712 crypto.go:164] Writing key to /home/thierry/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 ...
I0219 06:53:15.792265   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/profiles/minikube/apiserver.key.dd3b5fb2: {Name:mkb0cbb8a0f20ea3223fd0c346568bdef66f140b Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.792418   18712 certs.go:320] copying /home/thierry/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 -> /home/thierry/.minikube/profiles/minikube/apiserver.crt
I0219 06:53:15.792486   18712 certs.go:324] copying /home/thierry/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 -> /home/thierry/.minikube/profiles/minikube/apiserver.key
I0219 06:53:15.792533   18712 certs.go:302] generating aggregator signed cert: /home/thierry/.minikube/profiles/minikube/proxy-client.key
I0219 06:53:15.792546   18712 crypto.go:68] Generating cert /home/thierry/.minikube/profiles/minikube/proxy-client.crt with IP's: []
I0219 06:53:15.908802   18712 crypto.go:156] Writing cert to /home/thierry/.minikube/profiles/minikube/proxy-client.crt ...
I0219 06:53:15.908815   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/profiles/minikube/proxy-client.crt: {Name:mkfbac3519d6dcb2f934c279f7b1f08853fffa12 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.909168   18712 crypto.go:164] Writing key to /home/thierry/.minikube/profiles/minikube/proxy-client.key ...
I0219 06:53:15.909175   18712 lock.go:35] WriteFile acquiring /home/thierry/.minikube/profiles/minikube/proxy-client.key: {Name:mk3212c260dbf6e8cb4aed1325494a1ca15cf213 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:15.909519   18712 certs.go:388] found cert: /home/thierry/.minikube/certs/home/thierry/.minikube/certs/ca-key.pem (1675 bytes)
I0219 06:53:15.909568   18712 certs.go:388] found cert: /home/thierry/.minikube/certs/home/thierry/.minikube/certs/ca.pem (1078 bytes)
I0219 06:53:15.909599   18712 certs.go:388] found cert: /home/thierry/.minikube/certs/home/thierry/.minikube/certs/cert.pem (1123 bytes)
I0219 06:53:15.909621   18712 certs.go:388] found cert: /home/thierry/.minikube/certs/home/thierry/.minikube/certs/key.pem (1675 bytes)
I0219 06:53:15.910572   18712 ssh_runner.go:362] scp /home/thierry/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1399 bytes)
I0219 06:53:15.947959   18712 ssh_runner.go:362] scp /home/thierry/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I0219 06:53:15.970736   18712 ssh_runner.go:362] scp /home/thierry/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0219 06:53:15.998160   18712 ssh_runner.go:362] scp /home/thierry/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1679 bytes)
I0219 06:53:16.021435   18712 ssh_runner.go:362] scp /home/thierry/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0219 06:53:16.045325   18712 ssh_runner.go:362] scp /home/thierry/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1679 bytes)
I0219 06:53:16.070945   18712 ssh_runner.go:362] scp /home/thierry/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0219 06:53:16.093915   18712 ssh_runner.go:362] scp /home/thierry/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0219 06:53:16.118744   18712 ssh_runner.go:362] scp /home/thierry/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0219 06:53:16.147458   18712 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (740 bytes)
I0219 06:53:16.167071   18712 ssh_runner.go:195] Run: openssl version
I0219 06:53:16.173318   18712 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0219 06:53:16.184481   18712 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0219 06:53:16.190324   18712 certs.go:431] hashing: -rw-r--r--. 1 root root 1111 Feb 18 20:53 /usr/share/ca-certificates/minikubeCA.pem
I0219 06:53:16.190374   18712 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0219 06:53:16.196387   18712 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0219 06:53:16.207845   18712 kubeadm.go:388] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.29@sha256:be897edc9ed473a9678010f390a0092f488f6a1c30865f571c3b6388f9f56f9b Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.23.1 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[{Component:kubelet Key:housekeeping-interval Value:5m}] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.23.1 ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/thierry:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror:}
I0219 06:53:16.208081   18712 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0219 06:53:16.249565   18712 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0219 06:53:16.262388   18712 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0219 06:53:16.273485   18712 kubeadm.go:218] ignoring SystemVerification for kubeadm because of docker driver
I0219 06:53:16.273553   18712 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0219 06:53:16.283884   18712 kubeadm.go:149] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0219 06:53:16.283912   18712 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.23.1:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0219 06:53:28.746722   18712 out.go:203]     â–ª Generating certificates and keys ...
I0219 06:53:28.754512   18712 out.go:203]     â–ª Booting up control plane ...
I0219 06:53:28.761776   18712 out.go:203]     â–ª Configuring RBAC rules ...
I0219 06:53:28.764556   18712 cni.go:93] Creating CNI manager for ""
I0219 06:53:28.764567   18712 cni.go:167] CNI unnecessary in this configuration, recommending no CNI
I0219 06:53:28.764590   18712 ssh_runner.go:195] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I0219 06:53:28.765267   18712 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.23.1/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I0219 06:53:28.765404   18712 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.23.1/kubectl label nodes minikube.k8s.io/version=v1.25.1 minikube.k8s.io/commit=3e64b11ed75e56e4898ea85f96b2e4af0301f43d minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2022_02_19T06_53_28_0700 --all --overwrite --kubeconfig=/var/lib/minikube/kubeconfig
I0219 06:53:29.431314   18712 kubeadm.go:867] duration metric: took 666.608947ms to wait for elevateKubeSystemPrivileges.
I0219 06:53:29.431346   18712 ops.go:34] apiserver oom_adj: -16
I0219 06:53:29.431354   18712 kubeadm.go:390] StartCluster complete in 13.223517024s
I0219 06:53:29.431370   18712 settings.go:142] acquiring lock: {Name:mkda2931a2e0782b2cf4924ce24571bcc8d2a18d Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:29.431917   18712 settings.go:150] Updating kubeconfig:  /home/thierry/.kube/config
I0219 06:53:29.432520   18712 lock.go:35] WriteFile acquiring /home/thierry/.kube/config: {Name:mka567d421a0ca24030d6d8aff23c14e406ecbbe Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0219 06:53:29.957137   18712 kapi.go:244] deployment "coredns" in namespace "kube-system" and context "minikube" rescaled to 1
I0219 06:53:29.957228   18712 start.go:206] Will wait 6m0s for node &{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.23.1 ControlPlane:true Worker:true}
I0219 06:53:29.962656   18712 out.go:176] ðŸ”Ž  Verifying Kubernetes components...
I0219 06:53:29.957305   18712 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.23.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml"
I0219 06:53:29.962863   18712 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service kubelet
I0219 06:53:29.957328   18712 addons.go:415] enableAddons start: toEnable=map[], additional=[]
I0219 06:53:29.957610   18712 config.go:176] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.23.1
I0219 06:53:29.962931   18712 addons.go:65] Setting storage-provisioner=true in profile "minikube"
I0219 06:53:29.962946   18712 addons.go:153] Setting addon storage-provisioner=true in "minikube"
W0219 06:53:29.962952   18712 addons.go:165] addon storage-provisioner should already be in state true
I0219 06:53:29.962971   18712 addons.go:65] Setting default-storageclass=true in profile "minikube"
I0219 06:53:29.962978   18712 host.go:66] Checking if "minikube" exists ...
I0219 06:53:29.962986   18712 addons_storage_classes.go:33] enableOrDisableStorageClasses default-storageclass=true on "minikube"
I0219 06:53:29.963608   18712 cli_runner.go:133] Run: docker container inspect minikube --format={{.State.Status}}
I0219 06:53:29.963791   18712 cli_runner.go:133] Run: docker container inspect minikube --format={{.State.Status}}
I0219 06:53:30.080477   18712 out.go:176]     â–ª Using image gcr.io/k8s-minikube/storage-provisioner:v5
I0219 06:53:30.080723   18712 addons.go:348] installing /etc/kubernetes/addons/storage-provisioner.yaml
I0219 06:53:30.080732   18712 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storage-provisioner.yaml (2676 bytes)
I0219 06:53:30.080914   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:30.098986   18712 addons.go:153] Setting addon default-storageclass=true in "minikube"
W0219 06:53:30.098998   18712 addons.go:165] addon default-storageclass should already be in state true
I0219 06:53:30.099025   18712 host.go:66] Checking if "minikube" exists ...
I0219 06:53:30.099589   18712 cli_runner.go:133] Run: docker container inspect minikube --format={{.State.Status}}
I0219 06:53:30.121903   18712 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.23.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.49.1 host.minikube.internal\n           fallthrough\n        }' | sudo /var/lib/minikube/binaries/v1.23.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -"
I0219 06:53:30.123416   18712 api_server.go:51] waiting for apiserver process to appear ...
I0219 06:53:30.123612   18712 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
I0219 06:53:30.165297   18712 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/thierry/.minikube/machines/minikube/id_rsa Username:docker}
I0219 06:53:30.169845   18712 addons.go:348] installing /etc/kubernetes/addons/storageclass.yaml
I0219 06:53:30.169858   18712 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storageclass.yaml (271 bytes)
I0219 06:53:30.169926   18712 cli_runner.go:133] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0219 06:53:30.266341   18712 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/thierry/.minikube/machines/minikube/id_rsa Username:docker}
I0219 06:53:30.363268   18712 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.23.1/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml
I0219 06:53:30.431989   18712 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.23.1/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml
I0219 06:53:31.802964   18712 ssh_runner.go:235] Completed: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.23.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.49.1 host.minikube.internal\n           fallthrough\n        }' | sudo /var/lib/minikube/binaries/v1.23.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -": (1.681038811s)
I0219 06:53:31.802984   18712 start.go:773] {"host.minikube.internal": 192.168.49.1} host record injected into CoreDNS
I0219 06:53:31.803036   18712 ssh_runner.go:235] Completed: sudo pgrep -xnf kube-apiserver.*minikube.*: (1.679415261s)
I0219 06:53:31.803045   18712 api_server.go:71] duration metric: took 1.84579154s to wait for apiserver process to appear ...
I0219 06:53:31.803051   18712 api_server.go:87] waiting for apiserver healthz status ...
I0219 06:53:31.803060   18712 api_server.go:240] Checking apiserver healthz at https://192.168.49.2:8443/healthz ...
I0219 06:53:31.809974   18712 api_server.go:266] https://192.168.49.2:8443/healthz returned 200:
ok
I0219 06:53:31.811915   18712 api_server.go:140] control plane version: v1.23.1
I0219 06:53:31.811928   18712 api_server.go:130] duration metric: took 8.872371ms to wait for apiserver health ...
I0219 06:53:31.811936   18712 system_pods.go:43] waiting for kube-system pods to appear ...
I0219 06:53:31.832917   18712 system_pods.go:59] 4 kube-system pods found
I0219 06:53:31.832932   18712 system_pods.go:61] "etcd-minikube" [121889db-7122-429f-b965-4cfd7ef58066] Pending
I0219 06:53:31.832944   18712 system_pods.go:61] "kube-apiserver-minikube" [cfb980d3-7279-4ad5-96b4-231965b79374] Pending
I0219 06:53:31.832954   18712 system_pods.go:61] "kube-controller-manager-minikube" [16997c07-1fec-4b87-81e9-7af810845271] Running / Ready:ContainersNotReady (containers with unready status: [kube-controller-manager]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-controller-manager])
I0219 06:53:31.832961   18712 system_pods.go:61] "kube-scheduler-minikube" [aab51d34-c970-4474-8eff-2c4946d2bb3f] Running / Ready:ContainersNotReady (containers with unready status: [kube-scheduler]) / ContainersReady:ContainersNotReady (containers with unready status: [kube-scheduler])
I0219 06:53:31.832966   18712 system_pods.go:74] duration metric: took 21.026042ms to wait for pod list to return data ...
I0219 06:53:31.832975   18712 kubeadm.go:542] duration metric: took 1.875721953s to wait for : map[apiserver:true system_pods:true] ...
I0219 06:53:31.832987   18712 node_conditions.go:102] verifying NodePressure condition ...
I0219 06:53:31.840651   18712 node_conditions.go:122] node storage ephemeral capacity is 71645Mi
I0219 06:53:31.840684   18712 node_conditions.go:123] node cpu capacity is 4
I0219 06:53:31.840697   18712 node_conditions.go:105] duration metric: took 7.705335ms to run NodePressure ...
I0219 06:53:31.840708   18712 start.go:211] waiting for startup goroutines ...
I0219 06:53:31.870382   18712 ssh_runner.go:235] Completed: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.23.1/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml: (1.438367003s)
I0219 06:53:31.870413   18712 ssh_runner.go:235] Completed: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.23.1/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml: (1.507133303s)
I0219 06:53:31.877626   18712 out.go:176] ðŸŒŸ  Enabled addons: default-storageclass, storage-provisioner
I0219 06:53:31.877842   18712 addons.go:417] enableAddons completed in 1.92051232s
I0219 06:53:31.887226   18712 out.go:176] ðŸ’¡  kubectl not found. If you need it, try: 'minikube kubectl -- get pods -A'
I0219 06:53:31.894473   18712 out.go:176] ðŸ„  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
